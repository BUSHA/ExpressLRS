Subject: [PATCH] VTX channel switch
---
Index: src/lib/Backpack/devBackpack.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/Backpack/devBackpack.cpp b/src/lib/Backpack/devBackpack.cpp
--- a/src/lib/Backpack/devBackpack.cpp	(revision 40555e141efb0c93ea8d075ec47a27592355f924)
+++ b/src/lib/Backpack/devBackpack.cpp	(date 1736608575046)
@@ -20,6 +20,8 @@
 bool BackpackTelemReadyToSend = false;
 
 bool lastRecordingState = false;
+uint8_t lastVtxBandState = 4;
+uint8_t lastVtxChannelState = 8;
 
 #if defined(GPIO_PIN_BACKPACK_EN)
 
@@ -223,38 +225,165 @@
     return delays[index >= sizeof(delays) ? 0 : index];
 }
 
+// TODO we'll need proper mappings later
+// Maps AUX Switch position to corresponding VTx band
+int getMappedBand(int input, int reso) {
+    //-----------------------------------
+    //| OFF | A | B | E | F | R | L | X |
+    //|  0  | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
+    //-----------------------------------
+    switch (reso) {
+        case 0:  //2
+            switch (input) {
+                case 0:
+                    return 5; //R
+                case 1:
+                    return 6; //L 
+                default:
+                    return 0; // Return 0 for unknown inputs
+            }
+        case 1: //3
+            switch (input) {
+                case 0:
+                    return 5; //R
+                case 1:
+                    return 6; //L
+                case 2:
+                    return 7; //X
+                default:
+                    return 0; // Return 0 for unknown inputs
+            }
+        case 2: //6
+            switch (input) {
+                case 0:
+                    return 1; //A
+                case 1:
+                    return 2; //B
+                case 2:
+                    return 3; //E
+                case 3:
+                    return 5; //R
+                case 4:
+                    return 6; //L
+                case 5:
+                    return 7; //X
+                default:
+                    return 0; // Return 0 for unknown inputs
+            }
+        case 3: //8 
+            switch (input) { 
+                case 0:
+                    return 1; //A
+                case 1:
+                    return 2; //B
+                case 2:
+                    return 3; //E
+                case 3:
+                    return 4; //F
+                case 4:
+                    return 5; //R
+                case 5:
+                    return 6; //L
+                case 6:
+                    return 7; //X
+                default:
+                    return 0; // Return 0 for unknown inputs
+            }
+        default: 
+            return 0;
+    }
+}
+
+// TODO we'll need proper mappings later
+// Maps AUX Switch position to corresponding VTx channel
+int getMappedChannel(int input) {
+       switch (input) {
+        case 0:
+            return 0; //Ch1
+        case 1:
+            return 1; //Ch2
+        case 2:
+            return 2; //Ch3
+        case 3:
+            return 3; //Ch4
+        case 4:
+            return 4;
+        case 5:
+            return 5;
+        case 6:
+            return 6;
+        case 7:
+            return 7;  //Ch8   
+        default:
+            return 0;  // Return 0 for unknown inputs
+       }
+}
+
+int getMappedResolution(u_int8_t input) {
+    switch(input){
+        case 0:
+            return 2; // 2-Pos
+        case 1:
+            return 3; // 3-Pos
+        case 2:
+            return 6; // 6-Pos
+        case 3:
+            return 8; // 8-Pos
+        default:
+            return 2; // 2-Pos switch default
+    } 
+}
+
 static void AuxStateToMSPOut()
 {
 #if defined(USE_TX_BACKPACK)
-    if (config.GetDvrAux() == 0)
+    if (config.GetDvrAux() != 0)
     {
-        // DVR AUX control is off
-        return;
-    }
-
-    const uint8_t auxNumber = (config.GetDvrAux() - 1) / 2 + 4;
-    const uint8_t auxInverted = (config.GetDvrAux() + 1) % 2;
+        // DVR Recording
+        const uint8_t auxNumber = (config.GetDvrAux() - 1) / 2 + 4;
+        const uint8_t auxInverted = (config.GetDvrAux() + 1) % 2;
 
-    const bool recordingState = CRSF_to_BIT(ChannelData[auxNumber]) ^ auxInverted;
+        const bool recordingState = CRSF_to_BIT(ChannelData[auxNumber]) ^ auxInverted;
 
-    if (recordingState == lastRecordingState)
-    {
-        // Channel state has not changed since we last checked
-        return;
-    }
-    lastRecordingState = recordingState;
+        if (recordingState != lastRecordingState)
+        {
+            lastRecordingState = recordingState;
 
-    const uint16_t delay = GetDvrDelaySeconds(recordingState ? config.GetDvrStartDelay() : config.GetDvrStopDelay());
+            const uint16_t delay = GetDvrDelaySeconds(recordingState ? config.GetDvrStartDelay() : config.GetDvrStopDelay());
 
-    mspPacket_t packet;
-    packet.reset();
-    packet.makeCommand();
-    packet.function = MSP_ELRS_BACKPACK_SET_RECORDING_STATE;
-    packet.addByte(recordingState);
-    packet.addByte(delay & 0xFF); // delay byte 1
-    packet.addByte(delay >> 8); // delay byte 2
+            mspPacket_t packet;
+            packet.reset();
+            packet.makeCommand();
+            packet.function = MSP_ELRS_BACKPACK_SET_RECORDING_STATE;
+            packet.addByte(recordingState);
+            packet.addByte(delay & 0xFF); // delay byte 1
+            packet.addByte(delay >> 8); // delay byte 2
 
-    MSP::sendPacket(&packet, TxBackpack); // send to tx-backpack as MSP
+            MSP::sendPacket(&packet, TxBackpack); // send to tx-backpack as MSP
+        }
+    }
+
+    // VTX Band\Channel
+    const uint8_t vtxBandAux = (config.GetVtxBandAux() - 1) + 4;
+    const uint8_t vtxChannelAux = (config.GetVtxChannelAux() - 1) + 4;
+    const uint8_t bandState = getMappedBand(CRSF_to_N(ChannelData[vtxBandAux], getMappedResolution(config.GetVtxBandReso())), config.GetVtxBandReso());
+    const uint8_t channelState = getMappedChannel(CRSF_to_N(ChannelData[vtxChannelAux], getMappedResolution(config.GetVtxChannelReso())));
+    if (bandState != lastVtxBandState || channelState != lastVtxChannelState)
+    {
+        lastVtxBandState = bandState;
+        lastVtxChannelState = channelState;
+        uint8_t vtxIdx = (bandState - 1) * 8 + channelState;
+
+        mspPacket_t packet;
+        packet.reset();
+        packet.makeCommand();
+        packet.function = MSP_SET_VTX_CONFIG;
+        packet.addByte(vtxIdx);     // band/channel or frequency low byte
+        packet.addByte(0);          // frequency high byte, if frequency mode
+
+        CRSF::AddMspMessage(&packet, CRSF_ADDRESS_FLIGHT_CONTROLLER);
+        MSP::sendPacket(&packet, TxBackpack); // send to tx-backpack as MSP
+    }
 #endif // USE_TX_BACKPACK
 }
 
@@ -410,4 +539,4 @@
     .start = start,
     .event = event,
     .timeout = timeout
-};
+};
\ No newline at end of file
Index: src/lib/MSPVTX/freqTable.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/MSPVTX/freqTable.h b/src/lib/MSPVTX/freqTable.h
--- a/src/lib/MSPVTX/freqTable.h	(revision 40555e141efb0c93ea8d075ec47a27592355f924)
+++ b/src/lib/MSPVTX/freqTable.h	(date 1736266554428)
@@ -5,7 +5,7 @@
 #define BAND_NAME_LENGTH                8
 #define IS_FACTORY_BAND                 1
 #define CHANNEL_COUNT                   8
-#define FREQ_TABLE_SIZE 48
+#define FREQ_TABLE_SIZE 56
 
 #define RACE_MODE                       2
 #define RACE_MODE_POWER                 14 // dBm
@@ -19,9 +19,10 @@
     'F', 'A', 'T', 'S', 'H', 'A', 'R', 'K', // F
     'R', 'A', 'C', 'E', ' ', ' ', ' ', ' ', // R
     'R', 'A', 'C', 'E', '_', 'L', 'O', 'W', // L
+    'B', 'A', 'N', 'D', '_', 'X', ' ', ' ', // X
 };
 
-const uint8_t bandLetter[6] = {'A', 'B', 'E', 'F', 'R', 'L'};
+const uint8_t bandLetter[7] = {'A', 'B', 'E', 'F', 'R', 'L', 'X'};
 
 const uint16_t channelFreqTable[FREQ_TABLE_SIZE] = {
     5865, 5845, 5825, 5805, 5785, 5765, 5745, 5725, // A
@@ -29,7 +30,8 @@
     5705, 5685, 5665, 5645, 5885, 5905, 5925, 5945, // E
     5740, 5760, 5780, 5800, 5820, 5840, 5860, 5880, // F
     5658, 5695, 5732, 5769, 5806, 5843, 5880, 5917, // R
-    5362, 5399, 5436, 5473, 5510, 5547, 5584, 5621  // L
+    5362, 5399, 5436, 5473, 5510, 5547, 5584, 5621, // L
+    4990, 5020, 5050, 5080, 5110, 5140, 5170, 5200  // X
 };
 
 const uint8_t powerLevelsLut[NUM_POWER_LEVELS] = {1, RACE_MODE, 14, 20, 26};
Index: src/lib/CONFIG/config.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/CONFIG/config.h b/src/lib/CONFIG/config.h
--- a/src/lib/CONFIG/config.h	(revision 40555e141efb0c93ea8d075ec47a27592355f924)
+++ b/src/lib/CONFIG/config.h	(date 1736505054057)
@@ -53,8 +53,6 @@
                 dynamicPower:1,
                 modelMatch:1,
                 txAntenna:2,    // FUTURE: Which TX antenna to use, 0=Auto
-                ptrStartChannel:4,
-                ptrEnableChannel:5,
                 linkMode:3;
 } model_config_t;
 
@@ -95,6 +93,12 @@
                     backpackTlmMode:2;  // 0=Off, 1=Fwd tlm via espnow, 2=fwd tlm via wifi 3=(FUTURE) bluetooth
     uint8_t         dvrStartDelay:3,
                     dvrAux:5;
+    uint8_t         currentDomain, 
+                    currentDomainDual;
+    uint8_t         vtxChannelAux,
+                    vtxBandAux,
+                    vtxChannelReso,
+                    vtxBandReso;
     tx_button_color_t buttonColors[2];  // FUTURE: TX RGB color / mode (sets color of TX, can be a static color or standard)
                                         // FUTURE: Model RGB color / mode (sets LED color mode on the model, but can be second TX led color too)
                                         // FUTURE: Custom button actions
@@ -132,8 +136,12 @@
     uint8_t  GetBackpackTlmMode() const { return m_config.backpackTlmMode; }
     tx_button_color_t const *GetButtonActions(uint8_t button) const { return &m_config.buttonColors[button]; }
     model_config_t const &GetModelConfig(uint8_t model) const { return m_config.model_config[model]; }
-    uint8_t GetPTRStartChannel() const { return m_model->ptrStartChannel; }
-    uint8_t GetPTREnableChannel() const { return m_model->ptrEnableChannel; }
+    uint8_t GetCurrentDomain() const {return m_config.currentDomain;}
+    uint8_t GetCurrentDomainDual() const {return m_config.currentDomainDual;}
+    uint8_t GetVtxChannelAux() const {return m_config.vtxChannelAux;}
+    uint8_t GetVtxBandAux() const {return m_config.vtxBandAux;}
+    uint8_t GetVtxChannelReso() const {return m_config.vtxChannelReso;}
+    uint8_t GetVtxBandReso() const {return m_config.vtxBandReso;}
 
     // Setters
     void SetRate(uint8_t rate);
@@ -162,6 +170,12 @@
     void SetBackpackTlmMode(uint8_t mode);
     void SetPTRStartChannel(uint8_t ptrStartChannel);
     void SetPTREnableChannel(uint8_t ptrEnableChannel);
+    void SetCurrentDomain(uint8_t currentDomain);
+    void SetCurrentDomainDual(uint8_t currentDomainDual);
+    void SetVtxBandAux(uint8_t vtxBandAux);
+    void SetVtxChannelAux(uint8_t vtxChannelAux);
+    void SetVtxBandReso(uint8_t vtxBandReso);
+    void SetVtxChannelReso(uint8_t vtxChannelReso);
 
     // State setters
     bool SetModelId(uint8_t modelId);
@@ -237,6 +251,8 @@
                 teamracePitMode:1;  // FUTURE: Enable pit mode when disabling model
     uint8_t     targetSysId;
     uint8_t     sourceSysId;
+    uint8_t     currentDomain,
+                currentDomainDual;
 } rx_config_t;
 
 class RxConfig
@@ -275,6 +291,7 @@
     uint8_t GetSourceSysId()  const { return m_config.sourceSysId; }
     rx_config_bindstorage_t GetBindStorage() const { return (rx_config_bindstorage_t)m_config.bindStorage; }
     bool IsOnLoan() const;
+    uint8_t GetCurrentDomain() const {return m_config.currentDomain;}
 
     // Setters
     void SetUID(uint8_t* uid);
@@ -301,6 +318,10 @@
     void SetSourceSysId(uint8_t sysID);
     void SetBindStorage(rx_config_bindstorage_t value);
     void ReturnLoan();
+    void SetCurrentDomain(uint8_t currentDomain);
+#if defined(RADIO_LR1121)
+    void SetCurrentDomainDual(uint8_t currentDomain);
+#endif
 
 private:
     void CheckUpdateFlashedUid(bool skipDescrimCheck);
Index: src/lib/CONFIG/config.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/CONFIG/config.cpp b/src/lib/CONFIG/config.cpp
--- a/src/lib/CONFIG/config.cpp	(revision 40555e141efb0c93ea8d075ec47a27592355f924)
+++ b/src/lib/CONFIG/config.cpp	(date 1736500239674)
@@ -181,6 +181,18 @@
             m_config.backpackDisable = value8;
         if (nvs_get_u8(handle, "backpacktlmen", &value8) == ESP_OK)
             m_config.backpackTlmMode = value8;
+        if (nvs_get_u8(handle, "currentdomain", &value8) == ESP_OK)
+            m_config.currentDomain = value8;
+        if (nvs_get_u8(handle, "currentdomaindual", &value8) == ESP_OK)
+            m_config.currentDomainDual = value8;
+        if (nvs_get_u8(handle, "vtxchannelaux", &value8) == ESP_OK)
+            m_config.vtxChannelAux = value8;
+        if (nvs_get_u8(handle, "vtxbandaux", &value8) == ESP_OK)
+            m_config.vtxBandAux = value8;
+        if (nvs_get_u8(handle, "vtxchannelreso", &value8) == ESP_OK)
+            m_config.vtxChannelReso = value8;
+        if (nvs_get_u8(handle, "vtxbandreso", &value8) == ESP_OK)
+            m_config.vtxBandReso = value8;
     }
 
     for(unsigned i=0; i<CONFIG_TX_MODEL_CNT; i++)
@@ -283,6 +295,12 @@
     LAZY(dvrAux);
     LAZY(dvrStartDelay);
     LAZY(dvrStopDelay);
+    LAZY(currentDomain);
+    LAZY(currentDomainDual);
+    LAZY(vtxChannelAux);
+    LAZY(vtxBandAux);
+    LAZY(vtxChannelReso);
+    LAZY(vtxBandReso);
     #undef LAZY
 
     for (unsigned i=0; i<CONFIG_TX_MODEL_CNT; i++)
@@ -343,6 +361,12 @@
         nvs_set_u8(handle, "dvraux", m_config.dvrAux);
         nvs_set_u8(handle, "dvrstartdelay", m_config.dvrStartDelay);
         nvs_set_u8(handle, "dvrstopdelay", m_config.dvrStopDelay);
+        nvs_set_u8(handle, "currentdomain", m_config.currentDomain);
+        nvs_set_u8(handle, "currentdomaindual", m_config.currentDomainDual);
+        nvs_set_u8(handle, "vtxchannelaux", m_config.vtxChannelAux);
+        nvs_set_u8(handle, "vtxbandaux", m_config.vtxBandAux);
+        nvs_set_u8(handle, "vtxchannelreso", m_config.vtxChannelReso);
+        nvs_set_u8(handle, "vtxbandreso", m_config.vtxBandReso);
     }
     if (m_modified & BUTTON_CHANGED)
     {
@@ -476,6 +500,46 @@
     }
 }
 
+void
+TxConfig::SetVtxChannelAux(uint8_t vtxChannelAux)
+{
+    if (m_config.vtxChannelAux != vtxChannelAux)
+    {
+        m_config.vtxChannelAux = vtxChannelAux;
+        m_modified |= MAIN_CHANGED;
+    }
+}
+
+void
+TxConfig::SetVtxBandAux(uint8_t vtxBandAux)
+{
+    if (m_config.vtxBandAux != vtxBandAux)
+    {
+        m_config.vtxBandAux = vtxBandAux;
+        m_modified |= MAIN_CHANGED;
+    }
+}
+
+void
+TxConfig::SetVtxChannelReso(uint8_t vtxChannelReso)
+{
+    if (m_config.vtxChannelReso != vtxChannelReso)
+    {
+        m_config.vtxChannelReso = vtxChannelReso;
+        m_modified |= MAIN_CHANGED;
+    }
+}
+
+void
+TxConfig::SetVtxBandReso(uint8_t vtxBandReso)
+{
+    if (m_config.vtxBandReso != vtxBandReso)
+    {
+        m_config.vtxBandReso = vtxBandReso;
+        m_modified |= MAIN_CHANGED;
+    }
+}
+
 void
 TxConfig::SetVtxPower(uint8_t vtxPower)
 {
@@ -595,20 +659,20 @@
 }
 
 void
-TxConfig::SetPTRStartChannel(uint8_t ptrStartChannel)
+TxConfig::SetCurrentDomain(uint8_t currentDomain)
 {
-    if (ptrStartChannel != m_model->ptrStartChannel) {
-        m_model->ptrStartChannel = ptrStartChannel;
-        m_modified |= MODEL_CHANGED;
+    if (currentDomain != m_config.currentDomain) {
+        m_config.currentDomain = currentDomain;
+        m_modified |= MAIN_CHANGED;
     }
 }
 
 void
-TxConfig::SetPTREnableChannel(uint8_t ptrEnableChannel)
+TxConfig::SetCurrentDomainDual(uint8_t currentDomainDual)
 {
-    if (ptrEnableChannel != m_model->ptrEnableChannel) {
-        m_model->ptrEnableChannel = ptrEnableChannel;
-        m_modified |= MODEL_CHANGED;
+    if (currentDomainDual != m_config.currentDomainDual) {
+        m_config.currentDomainDual = currentDomainDual;
+        m_modified |= MAIN_CHANGED;
     }
 }
 
@@ -1236,6 +1300,26 @@
         m_modified = true;
     }
 }
+
+void
+RxConfig::SetCurrentDomain(uint8_t currentDomain)
+{
+    if (currentDomain != m_config.currentDomain) {
+        m_config.currentDomain = currentDomain;
+        m_modified = true;
+    }
+}
+
+#if defined(RADIO_LR1121)
+void
+RxConfig::SetCurrentDomainDual(uint8_t currentDomainDual)
+{
+    if (currentDomainDual != m_config.currentDomainDual) {
+        m_config.currentDomainDual = currentDomainDual;
+        m_modified = true;
+    }
+}
+#endif
 
 void RxConfig::SetTargetSysId(uint8_t value)
 {
Index: src/lib/LUA/tx_devLUA.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/LUA/tx_devLUA.cpp b/src/lib/LUA/tx_devLUA.cpp
--- a/src/lib/LUA/tx_devLUA.cpp	(revision 40555e141efb0c93ea8d075ec47a27592355f924)
+++ b/src/lib/LUA/tx_devLUA.cpp	(date 1736608373008)
@@ -35,6 +35,7 @@
 
 static char version_domain[20+1+6+1];
 char pwrFolderDynamicName[] = "TX Power (1000 Dynamic)";
+char domainFolderDynamicName[] = "RF Domain";
 char vtxFolderDynamicName[] = "VTX Admin (OFF:C:1 Aux11 )";
 static char modelMatchUnit[] = " (ID: 00)";
 static char tlmBandwidth[] = " (xxxxxbps)";
@@ -49,8 +50,10 @@
 static const char linkModeOpts[] = "Normal;MAVLink";
 static const char luastrDvrAux[] = "Off;" STR_LUA_ALLAUX_UPDOWN;
 static const char luastrDvrDelay[] = "0s;5s;15s;30s;45s;1min;2min";
-static const char luastrHeadTrackingEnable[] = "Off;On;" STR_LUA_ALLAUX_UPDOWN;
-static const char luastrHeadTrackingStart[] = STR_LUA_ALLAUX;
+static const char luastrVtxBand[] = "Off;" STR_LUA_ALLAUX;
+static const char luastrVtxChannel[] = "Off;" STR_LUA_ALLAUX;
+static const char luastrVtxBandReso[] = "2;3;6;8";
+static const char luastrVtxChannelReso[] = "2;3;6;8";
 static const char luastrOffOn[] = "Off;On";
 static char luastrPacketRates[] = STR_LUA_PACKETRATES;
 
@@ -70,12 +73,91 @@
     tlmBandwidth
 };
 
+//----------------------------DOMAIN------------------
+static struct luaItem_folder luaDomainFolder = {
+    {"ELRS Domain", CRSF_FOLDER},
+};
+
+extern const fhss_config_t* getDomains();
+
+static const char* buildRxDomainString() {
+    static std::string rxDomainString; 
+    rxDomainString.clear();
+
+    const fhss_config_t* domains = getDomains();
+    size_t domainCount = getDomainCount();
+
+    for (size_t i = 0; i < domainCount; ++i) {
+        rxDomainString += domains[i].domain;
+        if (i < domainCount - 1) {
+            rxDomainString += ";"; 
+        }
+    }
+
+    return rxDomainString.c_str();
+}
+
+static const char* buildTxDomainString() {
+    static std::string txDomainString; 
+    txDomainString.clear();
+
+    const fhss_config_t* domains = getDomains();
+    size_t domainCount = getDomainCount();
+
+    for (size_t i = 0; i < domainCount; ++i) {
+        txDomainString += domains[i].domain;
+        if (i < domainCount - 1) {
+            txDomainString += ";"; 
+        }
+    }
+
+    return txDomainString.c_str();
+}
+
+static const char* rxDomainString = buildRxDomainString();
+static const char* txDomainString = buildTxDomainString();
+
+static struct luaItem_selection luaDomainSelectTx = {
+    {"Tx Domain", CRSF_TEXT_SELECTION},
+    config.GetCurrentDomain(), // value
+    txDomainString,
+    STR_EMPTYSPACE
+};
+
+#if defined(RADIO_LR1121)
+
+static const char* buildDualDomainTxString() {
+    static std::string dDomainTxString; 
+    dDomainTxString.clear();
+
+    const fhss_config_t* domains = getDualDomains();
+    size_t domainCount = getDualDomainCount();
+
+    for (size_t i = 0; i < domainCount; ++i) {
+        dDomainTxString += domains[i].domain;
+        if (i < domainCount - 1) {
+            dDomainTxString += ";"; 
+        }
+    }
+
+    return dDomainTxString.c_str();
+}
+static const char* dualDomainTxString = buildDualDomainTxString();
+
+static struct luaItem_selection luaDomainSelectTxDual = {
+    {"Tx Dual D", CRSF_TEXT_SELECTION},
+    config.GetCurrentDomainDual(), // value
+    dualDomainTxString,
+    STR_EMPTYSPACE
+};
+#endif
+
 //----------------------------POWER------------------
 static struct luaItem_folder luaPowerFolder = {
     {"TX Power", CRSF_FOLDER},pwrFolderDynamicName
 };
 
-static struct luaItem_selection luaPower = {
+static struct luaItem_selection luaPower= {
     {"Max Power", CRSF_TEXT_SELECTION},
     0, // value
     strPowerLevels,
@@ -201,7 +283,7 @@
 static struct luaItem_selection luaVtxBand = {
     {"Band", CRSF_TEXT_SELECTION},
     0, // value
-    "Off;A;B;E;F;R;L",
+    "Off;A;B;E;F;R;L;X",
     STR_EMPTYSPACE
 };
 
@@ -245,7 +327,7 @@
 
 //---------------------------- BACKPACK ------------------
 static struct luaItem_folder luaBackpackFolder = {
-    {"Backpack", CRSF_FOLDER},
+    {"Backpack Pro", CRSF_FOLDER},
 };
 
 #if defined(GPIO_PIN_BACKPACK_EN)
@@ -274,16 +356,28 @@
     luastrDvrDelay,
     STR_EMPTYSPACE};
 
-static struct luaItem_selection luaHeadTrackingEnableChannel = {
-    {"HT Enable", CRSF_TEXT_SELECTION},
-    0, // value
-    luastrHeadTrackingEnable,
+static struct luaItem_selection luaVtxBandAux = {
+    {"VTx Band", CRSF_TEXT_SELECTION},
+    config.GetVtxBandAux(), // value
+    luastrVtxBand,
+    STR_EMPTYSPACE};
+
+static struct luaItem_selection luaVtxBandReso = {
+    {"Band Reso", CRSF_TEXT_SELECTION},
+    config.GetVtxBandReso(), // value
+    luastrVtxBandReso,
     STR_EMPTYSPACE};
 
-static struct luaItem_selection luaHeadTrackingStartChannel = {
-    {"HT Start Channel", CRSF_TEXT_SELECTION},
-    0, // value
-    luastrHeadTrackingStart,
+static struct luaItem_selection luaVtxChannelAux = {
+    {"VTx Channel", CRSF_TEXT_SELECTION},
+    config.GetVtxChannelAux(), // value
+    luastrVtxChannel,
+    STR_EMPTYSPACE};
+
+  static struct luaItem_selection luaVtxChannelReso = {
+    {"Channel Reso", CRSF_TEXT_SELECTION},
+    config.GetVtxChannelReso(), // value
+    luastrVtxChannelReso,
     STR_EMPTYSPACE};
 
 static struct luaItem_selection luaBackpackTelemetry = {
@@ -373,8 +467,10 @@
     LUA_FIELD_HIDE(luaDvrAux);
     LUA_FIELD_HIDE(luaDvrStartDelay);
     LUA_FIELD_HIDE(luaDvrStopDelay);
-    LUA_FIELD_HIDE(luaHeadTrackingEnableChannel);
-    LUA_FIELD_HIDE(luaHeadTrackingStartChannel);
+    LUA_FIELD_HIDE(luaVtxBandAux);
+    LUA_FIELD_HIDE(luaVtxBandReso);
+    LUA_FIELD_HIDE(luaVtxChannelAux);
+    LUA_FIELD_HIDE(luaVtxChannelReso);
     LUA_FIELD_HIDE(luaBackpackTelemetry);
     LUA_FIELD_HIDE(luaBackpackVersion);
   }
@@ -383,11 +479,25 @@
     LUA_FIELD_SHOW(luaDvrAux);
     LUA_FIELD_SHOW(luaDvrStartDelay);
     LUA_FIELD_SHOW(luaDvrStopDelay);
-    LUA_FIELD_SHOW(luaHeadTrackingEnableChannel);
-    LUA_FIELD_SHOW(luaHeadTrackingStartChannel);
+    LUA_FIELD_SHOW(luaVtxBandAux);
+    LUA_FIELD_SHOW(luaVtxBandReso);
+    LUA_FIELD_SHOW(luaVtxChannelAux);
+    LUA_FIELD_SHOW(luaVtxChannelReso);
     LUA_FIELD_SHOW(luaBackpackTelemetry);
     LUA_FIELD_SHOW(luaBackpackVersion);
   }
+  // VTx Band settings
+  if (config.GetVtxBandAux() == 0 || config.GetBackpackDisable()) {
+    LUA_FIELD_HIDE(luaVtxBandReso);
+  } else {
+    LUA_FIELD_SHOW(luaVtxBandReso);
+  }
+  // VTx Channel settings
+  if (config.GetVtxChannelAux() == 0 || config.GetBackpackDisable()) {
+    LUA_FIELD_HIDE(luaVtxChannelReso);
+  } else {
+    LUA_FIELD_SHOW(luaVtxChannelReso);
+  }
 }
 
 #if defined(PLATFORM_ESP32) || defined(PLATFORM_ESP8266)
@@ -631,6 +741,45 @@
 static void registerLuaParameters()
 {
   if (HAS_RADIO) {
+    registerLUAParameter(&luaDomainFolder);
+    registerLUAParameter(&luaDomainSelectTx, [](luaPropertiesCommon *item, uint8_t arg) {
+      const fhss_config_t* domains = getDomains();
+      FHSSconfig = &domains[arg];
+      config.SetCurrentDomain(arg);
+
+      if (connectionState == connected)
+      {
+        mspPacket_t msp;
+        msp.reset();
+        msp.makeCommand();
+        msp.function = MSP_SET_RX_CONFIG;
+        msp.addByte(MSP_ELRS_RF_MODE);
+        msp.addByte(arg);
+        msp.addByte(0);//0 is for low band, 1 is for hi band
+        CRSF::AddMspMessage(&msp, CRSF_ADDRESS_CRSF_RECEIVER);
+      }
+    }, luaDomainFolder.common.id);
+
+#if defined(RADIO_LR1121)
+    registerLUAParameter(&luaDomainSelectTxDual, [](luaPropertiesCommon *item, uint8_t arg) {
+      const fhss_config_t* dualDomains = getDualDomains();
+      FHSSconfigDualBand = &dualDomains[arg];
+      config.SetCurrentDomainDual(arg);
+
+      if (connectionState == connected)
+      {
+        mspPacket_t msp;
+        msp.reset();
+        msp.makeCommand();
+        msp.function = MSP_SET_RX_CONFIG;
+        msp.addByte(MSP_ELRS_RF_MODE);
+        msp.addByte(arg);
+        msp.addByte(1);//0 is for low band, 1 is for hi band
+        CRSF::AddMspMessage(&msp, CRSF_ADDRESS_CRSF_RECEIVER);
+      }
+    }, luaDomainFolder.common.id);
+  #endif
+
     registerLUAParameter(&luaAirRate, [](struct luaPropertiesCommon *item, uint8_t arg) {
     if (arg < RATE_MAX)
     {
@@ -823,13 +972,23 @@
           },
           luaBackpackFolder.common.id);
       registerLUAParameter(
-          &luaHeadTrackingEnableChannel, [](luaPropertiesCommon *item, uint8_t arg) {
-              config.SetPTREnableChannel(arg);
+          &luaVtxBandAux, [](luaPropertiesCommon *item, uint8_t arg) {
+              config.SetVtxBandAux(arg);
+          },
+          luaBackpackFolder.common.id);
+      registerLUAParameter(
+          &luaVtxBandReso, [](luaPropertiesCommon *item, uint8_t arg) {
+              config.SetVtxBandReso(arg);
+          },
+          luaBackpackFolder.common.id);
+      registerLUAParameter(
+          &luaVtxChannelAux, [](luaPropertiesCommon *item, uint8_t arg) {
+              config.SetVtxChannelAux(arg);
           },
           luaBackpackFolder.common.id);
       registerLUAParameter(
-          &luaHeadTrackingStartChannel, [](luaPropertiesCommon *item, uint8_t arg) {
-              config.SetPTRStartChannel(arg);
+          &luaVtxChannelReso, [](luaPropertiesCommon *item, uint8_t arg) {
+              config.SetVtxChannelReso(arg);
           },
           luaBackpackFolder.common.id);
       registerLUAParameter(
@@ -873,7 +1032,12 @@
   bool isMavlinkMode = config.GetLinkMode() == TX_MAVLINK_MODE;
   uint8_t currentRate = adjustPacketRateForBaud(config.GetRate());
   recalculatePacketRateOptions(handset->getMinPacketInterval());
+
   setLuaTextSelectionValue(&luaAirRate, RATE_MAX - 1 - currentRate);
+#if defined(RADIO_LR1121)
+  setLuaTextSelectionValue(&luaDomainSelectTxDual, config.GetCurrentDomainDual());
+#endif
+  setLuaTextSelectionValue(&luaDomainSelectTx, config.GetCurrentDomain());
 
   setLuaTextSelectionValue(&luaTlmRate, config.GetTlm());
   luaTlmRate.options = isMavlinkMode ? tlmRatiosMav : tlmRatios;
@@ -906,6 +1070,10 @@
 
   setLuaTextSelectionValue(&luaVtxBand, config.GetVtxBand());
   setLuaUint8Value(&luaVtxChannel, config.GetVtxChannel() + 1);
+  setLuaTextSelectionValue(&luaVtxBandAux, config.GetVtxBandAux());
+  setLuaTextSelectionValue(&luaVtxChannelAux, config.GetVtxChannelAux());
+    setLuaTextSelectionValue(&luaVtxBandReso, config.GetVtxBandReso());
+  setLuaTextSelectionValue(&luaVtxChannelReso, config.GetVtxChannelReso());
   setLuaTextSelectionValue(&luaVtxPwr, config.GetVtxPower());
   setLuaTextSelectionValue(&luaVtxPit, config.GetVtxPitmode());
   if (OPT_USE_TX_BACKPACK)
@@ -916,8 +1084,6 @@
     setLuaTextSelectionValue(&luaDvrAux, config.GetBackpackDisable() ? 0 : config.GetDvrAux());
     setLuaTextSelectionValue(&luaDvrStartDelay, config.GetBackpackDisable() ? 0 : config.GetDvrStartDelay());
     setLuaTextSelectionValue(&luaDvrStopDelay, config.GetBackpackDisable() ? 0 : config.GetDvrStopDelay());
-    setLuaTextSelectionValue(&luaHeadTrackingEnableChannel, config.GetBackpackDisable() ? 0 : config.GetPTREnableChannel());
-    setLuaTextSelectionValue(&luaHeadTrackingStartChannel, config.GetBackpackDisable() ? 0 : config.GetPTRStartChannel());
     setLuaTextSelectionValue(&luaBackpackTelemetry, config.GetBackpackDisable() ? 0 : config.GetBackpackTlmMode());
     setLuaStringValue(&luaBackpackVersion, backpackVersion);
   }
